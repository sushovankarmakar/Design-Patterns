package patterns;

import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import java.lang.reflect.Constructor;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class Singleton implements Serializable, Cloneable {
	//private static Singleton soleInstance = new Singleton();
	
	private static Singleton soleInstance = null;
	
	private Singleton() {
		if(soleInstance == null) soleInstance = new Singleton();
		
		System.out.println("Creating sole instance");
	}
	
	public static Singleton getInstance() {
		return soleInstance;
	}
	
	@Override
	protected Object clone() throws CloneNotSupportedException {
		// TODO Auto-generated method stub
		return super.clone();
	}
	
}

class TestClass {
	
	static void useSingleton() {
		Singleton singleton = Singleton.getInstance();
	}
	
	
	public static void main(String[] args) throws Exception {
		
//		
//		Singleton s1 = Singleton.getInstance();
//		Singleton s2 = Singleton.getInstance();
//		
//		print("s1", s1);
//		print("s2", s2);
//		
//		
//		//Reflection example
//		Class clazz = Class.forName("patterns.Singleton"); Constructor<Singleton>
//		ctor = clazz.getDeclaredConstructor(); ctor.setAccessible(true); 
//		Singleton s3 = ctor.newInstance();
//		 print("s3", s3);
//		
//		//Serialization example
//		ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream("C:/Users/skarmakar/eclipse-workspace/DesignPatterns"
//				+ "/JavaDesignPatterns/src/patterns/tmp/s2.ser"));
//		oos.writeObject(s2);
//		
//		ObjectInputStream ois = new ObjectInputStream(new FileInputStream("C:/Users/skarmakar/eclipse-workspace/DesignPatterns"
//				+ "/JavaDesignPatterns/src/patterns/tmp/s2.ser"));
//		Singleton s4 = (Singleton)ois.readObject();
//		
//		print("s4", s4);
//		
//		//Clone example
//		Singleton s5 = (Singleton) s2.clone();
//		print("s5", s5);
		
		
		ExecutorService service = Executors
		
		
		
		
		
	}

	static void print(String name, Singleton object) {
		System.out.println(String.format("Object : %s, Hashcode : %d", name, object.hashCode()));
		
	}
}
