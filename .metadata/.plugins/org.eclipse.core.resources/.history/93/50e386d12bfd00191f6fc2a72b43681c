package patterns;

import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import java.lang.reflect.Constructor;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class Singleton implements /* Serializable, */ Cloneable {
	//private static Singleton soleInstance = new Singleton();
	
	private static Singleton soleInstance = null;
	
	private Singleton() {
		if(soleInstance == null) soleInstance = new Singleton();
		
		System.out.println("Creating sole instance");
	}
	
	public static Singleton getInstance() {
		return soleInstance;
	}
	
	/*@Override
	protected Object clone() throws CloneNotSupportedException {
		// TODO Auto-generated method stub
		return super.clone();
	}*/
	
}

class TestClass {
	
	static void useSingleton() {
		Singleton singleton = Singleton.getInstance();
		print("Singleton ", singleton);
	}
	
	
	public static void main(String[] args) throws Exception {
				
		
		ExecutorService service = Executors.newFixedThreadPool(2);
		service.submit(TestClass::useSingleton);
		service.submit(TestClass::useSingleton);
		
		service.shutdown();
		
	}

	static void print(String name, Singleton object) {
		System.out.println(String.format("Object : %s, Hashcode : %d", name, object.hashCode()));
		
	}
}
