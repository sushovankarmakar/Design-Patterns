package patterns;

import java.io.Serializable;
import java.lang.reflect.Constructor;

public class Singleton implements Serializable {
	private static Singleton soleInstance = new Singleton();
	
	private Singleton() {
		System.out.println("Creating sole instance");
	}
	
	public static Singleton getInstance() {
		return soleInstance;
	}
}

class TestClass {
	public static void main(String[] args) throws Exception {
		Singleton s1 = Singleton.getInstance();
		Singleton s2 = Singleton.getInstance();
		
		print("s1", s1);
		print("s2", s2);
		
		
		//Reflection example
		/*
		 * Class clazz = Class.forName("patterns.Singleton"); Constructor<Singleton>
		 * ctor = clazz.getDeclaredConstructor(); ctor.setAccessible(true); Singleton s3
		 * = ctor.newInstance();
		 * 
		 * print("s3", s3);
		 */
		
		//Serialization example
		
	}

	static void print(String name, Singleton object) {
		System.out.println(String.format("Object : %s, Hashcode : %d", name, object.hashCode()));
		
	}
}
